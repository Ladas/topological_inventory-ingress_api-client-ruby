=begin
#Topological Inventory Ingress API

#Topological Inventory Ingress API

OpenAPI spec version: 0.0.2
Contact: support@redhat.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.3.4

=end

require 'uri'

module TopologicalInventoryIngressApiClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Return this API document in JSON format
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_documentation(opts = {})
      get_documentation_with_http_info(opts)
      nil
    end

    # Return this API document in JSON format
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_documentation_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_documentation ...'
      end
      # resource path
      local_var_path = '/openapi.json'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_documentation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # save inventory
    # Submits a payload to be persisted to the database
    # @param inventory Inventory payload
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def save_inventory(inventory, opts = {})
      data, _status_code, _headers = save_inventory_with_http_info(inventory, opts)
      data
    end

    # save inventory
    # Submits a payload to be persisted to the database
    # @param inventory Inventory payload
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def save_inventory_with_http_info(inventory, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.save_inventory ...'
      end
      # verify the required parameter 'inventory' is set
      if @api_client.config.client_side_validation && inventory.nil?
        fail ArgumentError, "Missing the required parameter 'inventory' when calling DefaultApi.save_inventory"
      end
      # resource path
      local_var_path = '/inventory'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(inventory)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#save_inventory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end
end
